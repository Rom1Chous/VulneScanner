from hamcrest import empty
import requests
from bs4 import BeautifulSoup
import sys
from urllib.parse import urljoin, urlparse
import os


domain = "https://www.hackthissite.org/" 
#domain="https://www.hackthissite.org/missions/basic/6/" 
#domain = "https://pswd.rsg.opalstacked.com/" 
#domain = "Ittp://localhost :3000° 
#domain = "http://atlas-picoct.f.net :53456/" # ApicoCIF File upload 
headers = requests.get (domain).headers
print(headers)

#Testing for ClickJacking vulnerability

#generate file for report
file = open('VulnerabilityReport.txt', 'w')
file.write(domain + ' Vulnerability Scanner Tests Report\n \n')


if 'X-Frame-Options' in headers or 'Content-Security-Policy' in headers:
    print(domain + " NOT Vulnerable")
    file.write('ClickJacking Vulnerability: Not Vulnerable to X-Frame-Options')
    
else:
    print(domain + " Vulnerable")
    file.write('ClickJacking Vulnerability: Vulnerable X-Frame-Options missing in headers\n')

#testing for potential Compression Bomb vulnerability

def check_compression(domain):

    headers = {
            "Accept-Encoding": "gzip, deflate, br"
        }
 
    try:
            response = requests.get(domain, headers=headers)

            # Print out the headers to check the 'Content-Encoding' header
            print(f"Request URL: {domain}")
            print("Response Headers:")
            for key, value in response.headers.items():
                print(f"{key}: {value}")

            # Check if 'Content-Encoding' is gzip, deflate, or br
            content_encoding = response.headers.get("Content-Encoding", "").lower()
            if content_encoding in ["gzip", "deflate", "br"]:
                print(f"[+]Vulnerable to Compression Bombs")
                print(f"Content-Encoding is {content_encoding}. Compression is enabled.")
                print("Ensure the server has safeguards against compression bombs.")
            else:
                print("No compression used in the response.")
        
    except requests.exceptions.RequestException as e:
            print(f"Error occurred: {e}")
    
#testing for Sql Injections

s = requests.Session()
s.headers["User-Agent"] = "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0"

#get all forms
def get_forms(domain): 
    soup = BeautifulSoup(s.get(domain).content, "html.parser")
    return soup.find_all("form")

def get_links(domain):
    soup = BeautifulSoup(s.get(domain).content, 'html.parser')
    links = set()
    
    for anchor in soup.find_all('a', href=True):
        href= anchor['href']
        absolute_url = urljoin(domain, href)
        links.add(absolute_url)
        print(f"{domain} + {href}")
        
    #for link in links:
        #print(f"[+] link found: {link}")
        
    return list(links)

def isSameDomain(domain, base_url):
    parsed_url = urlparse(domain)
    parsed_base_url = urlparse(base_url)
    return parsed_url.netloc == parsed_base_url.netloc

def joinUrl(domain, path):
    #print(f"Joining Url => {domain} + {path}")
    return urljoin(domain, path) 
    

def form_details(form):
    detailsOfForm = {}
    action = form.attrs.get("action")
    method = form.attrs.get("method", "get")
    inputs = []

    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("text")
        input_value = input_tag.attrs.get("value", "")
        inputs.append({
            "type": input_type,
            "name" : input_name,
            "value" : input_value
        })

    detailsOfForm['action'] = action
    detailsOfForm['method'] = method
    detailsOfForm['inputs'] = inputs
    return detailsOfForm


import requests 
from bs4 import BeautifulSoup 

def get_file_forms (domain): 
    response = requests.get(domain) 
    soup = BeautifulSoup(response.content, "html.parser")
    forms = soup.find_all("form") 
    print(f"Found {len(forms)} forms.") 
    form_details = []    

    for form in forms: 
        detailsOfForm= {} 

        action = form.attrs.get("action", "") 
        method = form.attrs.get("method", "post") 

        file_inputs = [] 
        for input_tag in form.find_all("input"): 
            input_type = input_tag.attrs.get("type", "").lower()
            input_name = input_tag.attrs.get("name", "")
            input_accept = input_tag.attrs.get("accept' '") 
            
            if input_type == "file" and ".png" in input_accept: 
                file_inputs.append({
                    "tуре": input_type, 
                    "name": input_name, 
                    "accept.": input_accept
                })
            # If we have file inputs, store the form's details 
        if file_inputs: 
            detailsOfForm['action' ] = action 
            detailsOfForm[' method' ] = method 
            detailsOfForm[' inputs' ] = file_inputs 
            form_details .append(detailsOfForm) 
            print(f"Form found: {detailsOfForm}") 

    return form_details 
        
def get_file_forms (domain): 
    response = requests .get(domain) 
    soup = BeautifulSoup(response.content, "html.parser") 
    forms = soup.find_all("form") 
    print(F"Found {len(forms)} forms.") 
    form_details = []

    for form in forms: 
        detailsOfForm = {}

        action = form.attrs.get("action", "")
        method = form.attrs.get("method", "post") 
        file_inputs = []
        for input_tag in form.find_all("input"): 
            input_type = input_tag.attrs.get("type","").lower() 
            input_name = input_tag.attrs.get ("name", "") 
            input_accept = input_tag.attrs.get("accept", "")

            if input_type == "file" and ".png" in input_accept: 
                file_inputs.append({
                    "type": input_type,
                    "name": input_name, 
                    "accept": input_accept 
                    })
        if file_inputs: 
            detailsOfForm['action'] = action
            detailsOfForm['method'] = method 
            detailsOfForm['inputs'] = file_inputs 
            form_details .append (detailsOfForm) 
            print(f"Form found: {detailsOfForm}")
            
    return form_details 

def submit_file_to_form(domain, form_details, file_path): 
    for form in form_details: 
        action = form['action'] 
        method = form['method'] 
        inputs = form['inputs'] 

        data = {} 
        files = {} 

        for input_info in inputs: 
            if input_info['type'] == "file":
                files[input_info['name']] = open(file_path, 'rb') 
                if method.lower() == 'post': 
                    response = requests.post(domain, data=data, files=files) 
                    print(f"[*] Form submitted with response status: {response.status_code} in {response}") 
                    print(f"Response Content (Text) :An{response.text}") 
                    file.write("[!) Vulnerable to script injection with file input")
                else:
                    print(f"Unsupported method: {method}")

            
def vulnerable(response):
    errors = {"quoted string not properly terminated",
        "unclosed quotation mark after the character string",
        "you have an error in your sql syntax",
        "MySQL server has gone away", 
        "ERROR: invalid input syntax for integer"}
    try:
        decoded_content = response.content.decode('utf-8', errors='ignore').lower()
    except UnicodeDecodeError:
        print("Failed to decode response data content")
        return False
    for error in errors:
        if error in decoded_content:
            return True
    return False